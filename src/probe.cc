/* -*- c-file-style: "gnu"; c-basic-offset: 2; -*-
 * Copyright (c) 2017 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of Adjacent Link LLC nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

#include "probe.h"
#include "otestpoint/toolkit/exception.h"
#include "otestpoint/toolkit/stringto.h"
#include "otestpoint/probeserviceuser.h"
#include "iptraffic.pb.h"

#include <libxml/parser.h>
#include <libxml/xmlschemas.h>
#include <pthread.h>
#include <net/ethernet.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <arpa/inet.h>
#include <sys/socket.h> 
#ifdef __linux__
// All this needed just to find our MAC address!
#  include <net/if.h>
#  include <netinet/in.h> 
#  include <netinet/if_ether.h>
#  include <unistd.h>
#  include <sys/ioctl.h>
#endif
namespace
{
  const int PCAP_SNAPLEN   = 0xFFFF;
  const int PCAP_PROMISC   = 1;
  const int PCAP_IMMEDIATE = 1;

  const char * pzSchema="\
<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\
<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'>\
  <xs:simpleType name='YesNoType'>\
    <xs:restriction base='xs:token'>\
      <xs:enumeration value='yes'/>\
      <xs:enumeration value='no'/>\
    </xs:restriction>\
  </xs:simpleType>\
  <xs:simpleType name='DirectionType'>\
    <xs:restriction base='xs:token'>\
      <xs:enumeration value='receive'/>\
      <xs:enumeration value='transmit'/>\
      <xs:enumeration value='both'/>\
    </xs:restriction>\
  </xs:simpleType>\
  <xs:element name='probe-iptraffic'>\
    <xs:complexType>\
      <xs:sequence>\
        <xs:element name='device' maxOccurs='unbounded' minOccurs='1'>\
          <xs:complexType>\
            <xs:simpleContent>\
              <xs:extension base='xs:string'>\
                <xs:attribute type='xs:string' name='name' use='required'/>\
              </xs:extension>\
            </xs:simpleContent>\
          </xs:complexType>\
        </xs:element>\
      </xs:sequence>\
      <xs:attribute name='resetOnSend' type='YesNoType' use='optional' default='no'/>\
      <xs:attribute name='direction' type='DirectionType' use='optional' default='receive'/>\
    </xs:complexType>\
  </xs:element>\
</xs:schema>";
}


OpenTestPoint::IPTraffic::Probe::Probe(ProbeIndex probeIndex):
  ProbePlugin{probeIndex},
  vContexts_{}
{}

OpenTestPoint::ProbeNames
OpenTestPoint::IPTraffic::Probe::initialize(const std::string & sConfigurationFile)
{
  LIBXML_TEST_VERSION;

  xmlDocPtr pSchemaDoc{xmlReadMemory(pzSchema,
                                     strlen(pzSchema),
                                     "file:///probe-iproute.xsd",
                                     nullptr,
                                     0)};

  if(!pSchemaDoc)
    {
      throw Toolkit::Exception{"unable to open schema"};
    }

  xmlSchemaParserCtxtPtr pParserContext{xmlSchemaNewDocParserCtxt(pSchemaDoc)};

  if(!pParserContext)
    {
      throw Toolkit::Exception{"bad schema context"};
    }

  xmlSchemaPtr pSchema{xmlSchemaParse(pParserContext)};

  if(!pSchema)
    {
      throw Toolkit::Exception{"bad schema parser"};
    }

  xmlSchemaValidCtxtPtr pSchemaValidCtxtPtr{xmlSchemaNewValidCtxt(pSchema)};

  if(!pSchemaValidCtxtPtr)
    {
      throw Toolkit::Exception{"bad schema valid context"};
    }

  xmlSchemaSetValidOptions(pSchemaValidCtxtPtr,XML_SCHEMA_VAL_VC_I_CREATE);

  xmlDocPtr pDoc = xmlReadFile(sConfigurationFile.c_str(),nullptr,0);

  if(xmlSchemaValidateDoc(pSchemaValidCtxtPtr, pDoc))
    {
      throw Toolkit::Exception{"invalid document"};
    }

  xmlNodePtr pRoot = xmlDocGetRootElement(pDoc);
  // See if we've been configure to reset the tables when we emit
  xmlChar* reset = xmlGetProp(pRoot, (const xmlChar *) "resetOnSend");

  if(reset != nullptr)
    {
      OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                           "resetOnSend defined to %s",
                                           reset);

      // parse it
      bResetOnSend_ = xmlStrEqual(reset, (const xmlChar *)"yes");
    }
  OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                                      bResetOnSend_ ?
                                      "we will reset the tables on each send" :
                                      "we will not reset the tables on send");


  xmlChar* direction = xmlGetProp(pRoot, (const xmlChar *) "direction");

  if(direction != nullptr)
    {
      OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                           "direction defined to %s",
                                           direction);

      // parse it
      if(xmlStrEqual(direction, (const xmlChar *)"receive"))
        {
          direction_ = PCAP_D_IN;
        }
      else if(xmlStrEqual(direction, (const xmlChar *)"transmit"))
        {
          direction_ = PCAP_D_OUT;
        }
      else if(xmlStrEqual(direction, (const xmlChar *)"both"))
        {
          direction_ = PCAP_D_INOUT;
        }
    }

  xmlNodePtr pChild = pRoot->xmlChildrenNode;
  xmlChar * pDeviceName = nullptr;

  mutex_.lock();

  while(pChild != nullptr)
    {
      if((!xmlStrcmp(pChild->name, (const xmlChar *)"device")))
        {
          pDeviceName = xmlGetProp(pChild,(const xmlChar *) "name");
#ifdef __linux__
          // Interrogate the underlying system what our hardware address is (MAC address)
          // first massage the name into an interface request
          struct ifreq ifr;
          size_t devlen=strlen(reinterpret_cast<const char *>(pDeviceName));
          if (devlen<sizeof(ifr.ifr_name))
            {
              memcpy(ifr.ifr_name,pDeviceName,devlen);
              ifr.ifr_name[devlen]=0;
            }
          else
            {
              OPENTESTPOINT_PROBESERVICE_LOG_ERROR(pProbeService_,
                      "device name is too long %s",
                      pDeviceName);
            }
          // then we need a socket descriptor to communicate with
          // it doesn't matter what kind of socket, so a datagram will do.
          int ifreqfd=socket(AF_UNIX,SOCK_DGRAM,0);
          if (ifreqfd==-1)
            {
              OPENTESTPOINT_PROBESERVICE_LOG_ERROR(pProbeService_,
                      "unable to open a socket!");
            }
          // make the request
          if (ioctl(ifreqfd,SIOCGIFHWADDR,&ifr)==-1)
            {
              int temp_errno=errno;
              close(ifreqfd);
              OPENTESTPOINT_PROBESERVICE_LOG_ERROR(pProbeService_,
                      "can't request MAC address: %s, from device %s",
                      strerror(temp_errno), pDeviceName);
            }
          close(ifreqfd);
          // ensure we can understand it
          if (ifr.ifr_hwaddr.sa_family!=ARPHRD_ETHER)
            {
              OPENTESTPOINT_PROBESERVICE_LOG_ERROR(pProbeService_,
                      "%s is not an ethernet device",
                      pDeviceName);
            }
          // Grab the actual MAC address
          uint8_t mac[6];
          for(int i=0; i< 6; i++)
            {
              mac[i] = ifr.ifr_hwaddr.sa_data[i];
            }
          char addr[18] = {};
          sprintf(addr, "%02x:%02x:%02x:%02x:%02x:%02x",
                  static_cast<unsigned char>(mac[0]),
                  static_cast<unsigned char>(mac[1]),
                  static_cast<unsigned char>(mac[2]),
                  static_cast<unsigned char>(mac[3]),
                  static_cast<unsigned char>(mac[4]),
                  static_cast<unsigned char>(mac[5]));

          OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                  "Our mac address %s",
                  addr);
          
#endif          
          ProbeContext pc(std::string(reinterpret_cast<const char *>(pDeviceName)), mac);
          vContexts_.push_back(pc);

          // lDevices_.push_back(reinterpret_cast<const char *>(pDeviceName));
          xmlFree(pDeviceName);
        }

      pChild = pChild->next;
    }
  mutex_.unlock();

  xmlFreeDoc(pDoc);

  // To-Do, check this name is accurate
  probeNames_.push_back("IPTraffic.Tables.IPv4.UDP");
  probeNames_.push_back("IPTraffic.Tables.Ether");

  for(auto const & context: vContexts_)
    {
      OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                                          "creating IPTraffic probe on %s",
                                          context.sDevice_.c_str());
    }

  return probeNames_;
}

void OpenTestPoint::IPTraffic::Probe::start()
{
  char errbuf[PCAP_ERRBUF_SIZE]={};

  // open pcap handle
  for(auto & context: vContexts_)
    {
      context.mutex_.lock();

      const char* device = context.sDevice_.c_str();

      pcap_t * pPcapHandle = pcap_create(device, errbuf);
      if(pPcapHandle  == nullptr )
        {
          throw Toolkit::Exception{"could not open device:%s %s",
              device,
              errbuf};
        }
      // Set the settings we want to run with
      pcap_set_snaplen(pPcapHandle, PCAP_SNAPLEN);
      pcap_set_promisc(pPcapHandle, PCAP_PROMISC);
      // immediate mode disables buffering of packets
      pcap_set_immediate_mode(pPcapHandle, PCAP_IMMEDIATE);

      // Once we've set all the settings we want, we need to activate it
      int rc = pcap_activate(pPcapHandle);
      if(rc < 0)
        {
          // an error ocurred
          pcap_close(pPcapHandle);
          throw Toolkit::Exception{"could not activate the packet capture on device %s: %s",
              device,
              pcap_statustostr(rc)};
        }
      if(rc > 0)
        {
          // A warning was issued, log it and keep going.
          OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                                              "Warning from libpcap on activating capture on %s: %s",
                                              device,
                                              pcap_statustostr(rc));
        }


      // set datalink type, this covers 10/100/1000
      if(pcap_set_datalink(pPcapHandle, DLT_EN10MB) < 0)
        {
          OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                                              "could not set datalink type on device %s %s",
                                              device,
                                              errbuf);
        }

      // only get inbound data, should probably be a flag on the probe conf
      // currently unsupported by winpcap
      if(pcap_setdirection(pPcapHandle, direction_) < 0)
        {
          throw Toolkit::Exception{"could not set direction on device %s %s",
              device,
              errbuf};
        }

      // no need for an "else" since the ifs throw
      context.pPcapHandle_=pPcapHandle;

      // unlock it now, so we don't deadlock the thread, we're done with our changes anyway
      context.mutex_.unlock();

      // start pcap read thread
      context.thread_ = std::thread(&Probe::readDevice,this,&context);
    }
}

void OpenTestPoint::IPTraffic::Probe::stop()
{
  for(auto & context: vContexts_)
    {
      context.mutex_.lock();

      if(context.pPcapHandle_)
        {
          // stop the capture
          pcap_close(context.pPcapHandle_);
          context.pPcapHandle_ = nullptr;
          //stop the thread
          pthread_cancel(context.thread_.native_handle());
          context.thread_.join();
        }
    }
}

void OpenTestPoint::IPTraffic::Probe::destroy()
{}


OpenTestPoint::ProbeData OpenTestPoint::IPTraffic::Probe::probe()
{
  ProbeData probeData{};

  char addr[18] = {};

  auto udpMsg = OpenTestPoint::Measurement_pcap_tables_ipv4_udp{};
  auto etherMsg = OpenTestPoint::Measurement_pcap_tables_ether{};

  if(direction_ == PCAP_D_IN || direction_ == PCAP_D_INOUT)
    {
      OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                           "reporting inbound traffic");
      auto udpReceive = udpMsg.mutable_receive();

      udpReceive->add_labels("Device");
      udpReceive->add_labels("Src");
      udpReceive->add_labels("Dst");
      udpReceive->add_labels("Port");
      udpReceive->add_labels("Rx Bytes");
      udpReceive->add_labels("Rx Packets");
    
      auto etherReceive = etherMsg.mutable_receive();
    
      etherReceive->add_labels("Device");
      etherReceive->add_labels("Src");
      etherReceive->add_labels("Dst");
      etherReceive->add_labels("Rx Packets");
    
      for(auto & context: vContexts_)
        {
          context.mutex_.lock();

          for(const auto & entry : context.receiveStore_.udp_)
            {
              auto pRow = udpReceive->add_rows();
              // Interface name
              auto pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              pValue->set_svalue(context.sDevice_);
            
              // Source IP address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              inet_ntop(AF_INET,
                        &entry.first.u32SrcIP_,
                        addr,
                        sizeof(addr));
              pValue->set_svalue(addr);
            
              // Destination IP address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              inet_ntop(AF_INET,
                        &entry.first.u32DstIP_,
                        addr,
                        sizeof(addr));
              pValue->set_svalue(addr);
            
              // Destination Port
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.first.u16DstPort_);
            
              // Total Bytes
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Bytes_);

              // Total Packets
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Packets_);
            }

          if(bResetOnSend_)
            {
              context.receiveStore_.udp_.clear();
            }

          for(const auto & entry : context.receiveStore_.ether_)
            {
              auto pRow = etherReceive->add_rows();

              // Interface name
              auto pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              pValue->set_svalue(context.sDevice_);
            
              char saddr[18] = {};
              // Source MAC
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              sprintf(saddr, "%02x:%02x:%02x:%02x:%02x:%02x",
                      static_cast<unsigned char>(entry.first.etherSHost_[0]),
                      static_cast<unsigned char>(entry.first.etherSHost_[1]),
                      static_cast<unsigned char>(entry.first.etherSHost_[2]),
                      static_cast<unsigned char>(entry.first.etherSHost_[3]),
                      static_cast<unsigned char>(entry.first.etherSHost_[4]),
                      static_cast<unsigned char>(entry.first.etherSHost_[5]));
              pValue->set_svalue(saddr);
            
              char daddr[18] = {};
              // destination mac address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              sprintf(daddr, "%02x:%02x:%02x:%02x:%02x:%02x",
                      static_cast<unsigned char>(entry.first.etherDHost_[0]),
                      static_cast<unsigned char>(entry.first.etherDHost_[1]),
                      static_cast<unsigned char>(entry.first.etherDHost_[2]),
                      static_cast<unsigned char>(entry.first.etherDHost_[3]),
                      static_cast<unsigned char>(entry.first.etherDHost_[4]),
                      static_cast<unsigned char>(entry.first.etherDHost_[5]));
              pValue->set_svalue(daddr);

              // number of packets received
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Packets_);

              OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                                   "Sending %s|%s|%s|%lu",
                                                   context.sDevice_.c_str(),
                                                   saddr,
                                                   daddr,
                                                   entry.second.u64Packets_);

            }

          if(bResetOnSend_)
            {
              context.receiveStore_.ether_.clear();
            }

          context.mutex_.unlock();
        }

    }
  if(direction_ == PCAP_D_OUT || direction_ == PCAP_D_INOUT)
    {
      OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                           "reporting outbound traffic");
      auto udpTransmit = udpMsg.mutable_transmit();

      udpTransmit->add_labels("Device");
      udpTransmit->add_labels("Src");
      udpTransmit->add_labels("Dst");
      udpTransmit->add_labels("Port");
      udpTransmit->add_labels("Tx Bytes");
      udpTransmit->add_labels("Tx Packets");
    
      auto etherTransmit = etherMsg.mutable_transmit();
    
      etherTransmit->add_labels("Device");
      etherTransmit->add_labels("Src");
      etherTransmit->add_labels("Dst");
      etherTransmit->add_labels("Tx Packets");
    
      for(auto & context: vContexts_)
        {
          context.mutex_.lock();

          for(const auto & entry : context.transmitStore_.udp_)
            {
              auto pRow = udpTransmit->add_rows();
              // Interface name
              auto pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              pValue->set_svalue(context.sDevice_);
            
              // Source IP address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              inet_ntop(AF_INET,
                        &entry.first.u32SrcIP_,
                        addr,
                        sizeof(addr));
              pValue->set_svalue(addr);
            
              // Destination IP address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              inet_ntop(AF_INET,
                        &entry.first.u32DstIP_,
                        addr,
                        sizeof(addr));
              pValue->set_svalue(addr);
            
              // Destination Port
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.first.u16DstPort_);
            
              // Total Bytes
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Bytes_);

              // Total Packets
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Packets_);
            }

          if(bResetOnSend_)
            {
              context.transmitStore_.udp_.clear();
            }

          for(const auto & entry : context.transmitStore_.ether_)
            {
              auto pRow = etherTransmit->add_rows();

              // Interface name
              auto pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              pValue->set_svalue(context.sDevice_);
            
              char saddr[18] = {};
              // Source MAC
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              sprintf(saddr, "%02x:%02x:%02x:%02x:%02x:%02x",
                      static_cast<unsigned char>(entry.first.etherSHost_[0]),
                      static_cast<unsigned char>(entry.first.etherSHost_[1]),
                      static_cast<unsigned char>(entry.first.etherSHost_[2]),
                      static_cast<unsigned char>(entry.first.etherSHost_[3]),
                      static_cast<unsigned char>(entry.first.etherSHost_[4]),
                      static_cast<unsigned char>(entry.first.etherSHost_[5]));
              pValue->set_svalue(saddr);
            
              char daddr[18] = {};
              // destination mac address
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_STRING);
              sprintf(daddr, "%02x:%02x:%02x:%02x:%02x:%02x",
                      static_cast<unsigned char>(entry.first.etherDHost_[0]),
                      static_cast<unsigned char>(entry.first.etherDHost_[1]),
                      static_cast<unsigned char>(entry.first.etherDHost_[2]),
                      static_cast<unsigned char>(entry.first.etherDHost_[3]),
                      static_cast<unsigned char>(entry.first.etherDHost_[4]),
                      static_cast<unsigned char>(entry.first.etherDHost_[5]));
              pValue->set_svalue(daddr);

              // number of packets transmitd
              pValue = pRow->add_values();
              pValue->set_type(OpenTestPoint::MeasurementTable::Measurement::TYPE_UINTEGER);
              pValue->set_uvalue(entry.second.u64Packets_);

              OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                                   "Sending %s|%s|%s|%lu",
                                                   context.sDevice_.c_str(),
                                                   saddr,
                                                   daddr,
                                                   entry.second.u64Packets_);

            }

          if(bResetOnSend_)
            {
              context.transmitStore_.ether_.clear();
            }

          context.mutex_.unlock();
        }

    }


  std::string udpBlob{};

  udpMsg.SerializeToString(&udpBlob);
  probeData.push_back(std::make_tuple("IPTraffic.Tables.IPv4.UDP",
                                      std::move(udpBlob),
                                      udpMsg.description().name(),
                                      udpMsg.description().module(),
                                      udpMsg.description().version()));

  std::string etherBlob{};
  etherMsg.SerializeToString(&etherBlob);
  probeData.push_back(std::make_tuple("IPTraffic.Tables.Ether",
                                      std::move(etherBlob),
                                      etherMsg.description().name(),
                                      etherMsg.description().module(),
                                      etherMsg.description().version()));

  return probeData;
}

OpenTestPoint::IPTraffic::Probe::~Probe()
{}

void OpenTestPoint::IPTraffic::Probe::readDevice(ProbeContext * pProbeContext)
{
  const std::uint8_t * buf{};

  struct pcap_pkthdr * pPcapHdr{};

  int iPcapResult{};

  while(pProbeContext->pPcapHandle_)
    {
      // get frame, blocks here
      iPcapResult = pcap_next_ex(pProbeContext->pPcapHandle_, &pPcapHdr, &buf);

      // error
      if(iPcapResult < 0)
        {
          OPENTESTPOINT_PROBESERVICE_LOG_ERROR(pProbeService_,
                                               "pcap_next_ex error %s",
                                               pcap_geterr(pProbeContext->pPcapHandle_));

          // done
          break;
        }
      // time out
      else if(iPcapResult == 0)
        {
          continue;
        }
      // success
      else if(iPcapResult == 1)
        {
          if(pPcapHdr->caplen >= ETHER_HDR_LEN)
            {
              // eth header
              const ether_header * pEthHeader = reinterpret_cast<const ether_header *>(buf);
              // First, figure out the direction!
              bool ours = true;
              for(int i = 0; i< 6; i++)
                {
                  if(pEthHeader->ether_shost[i] != pProbeContext->aMac_[i])
                    {
                      ours = false;
                      break;
                    }
                }
              OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                      ours?"packet is ours":"packet came from elsewhere");
                  
              // scope block for storing the Ethernet frame data
              {
                pProbeContext->mutex_.lock();
                ProbeContext::EtherKey key(pEthHeader->ether_shost, pEthHeader->ether_dhost);

                ProbeContext::Store* store = ours ? &(pProbeContext->transmitStore_): &(pProbeContext->receiveStore_);

                auto iter = store->ether_.find(key);
                if(iter != store->ether_.end())
                  {
                    iter->second.u64Packets_ += 1;
                  }
                else
                  {
                    char addr[18] = {};
                    sprintf(addr, "%02x:%02x:%02x:%02x:%02x:%02x",
                            static_cast<unsigned char>(key.etherSHost_[0]),
                            static_cast<unsigned char>(key.etherSHost_[1]),
                            static_cast<unsigned char>(key.etherSHost_[2]),
                            static_cast<unsigned char>(key.etherSHost_[3]),
                            static_cast<unsigned char>(key.etherSHost_[4]),
                            static_cast<unsigned char>(key.etherSHost_[5]));

                    OPENTESTPOINT_PROBESERVICE_LOG_INFO(pProbeService_,
                                                        "New mac source %s",
                                                        addr);
                    ProbeContext::EtherValue value;
                    value.u64Packets_=1;
                    store->ether_.insert({key,value});
                  }

                pProbeContext->mutex_.unlock();
              }


              switch(ntohs(pEthHeader->ether_type))
                {
                case ETHERTYPE_IP:
                  {
                    const iphdr * pIPHeader =
                      reinterpret_cast<const iphdr *>(buf + ETHER_HDR_LEN);

                    switch(pIPHeader->protocol)
                      {
                      case IPPROTO_UDP:
                        {
			  // ihl in units of 32-bit words. convert to bytes.
                          const udphdr * pUDPHeader =
                            reinterpret_cast<const udphdr *>(buf + ETHER_HDR_LEN  + (pIPHeader->ihl*4));

                          pProbeContext->mutex_.lock();
                          std::uint16_t port = ntohs(pUDPHeader->dest);
                          if(ntohs(pUDPHeader->source) < ntohs(pUDPHeader->dest)){
                            port = ntohs(pUDPHeader->source);
                          }
                          OPENTESTPOINT_PROBESERVICE_LOG_DEBUG(pProbeService_,
                                  "chose port %u (source %u and dest %u)",
                                  port, ntohs(pUDPHeader->source), ntohs(pUDPHeader->dest));
                          
                          ProbeContext::UDPKey key(pIPHeader->saddr,
                                                   pIPHeader->daddr,
                                                   port);

                          ProbeContext::Store* store = ours ? &(pProbeContext->transmitStore_): &(pProbeContext->receiveStore_);
                
                          auto iter = store->udp_.find(key);

                          if(iter != store->udp_.end())
                            {
                              iter->second.u64Bytes_ += ntohs(pUDPHeader->len);
                              ++iter->second.u64Packets_;
                            }
                          else
                            {
                              ProbeContext::UDPValue value;
                              value.u64Bytes_ = ntohs(pUDPHeader->len);
                              value.u64Packets_ = 1;

                              store->udp_.insert({key,value});
                            }

                          pProbeContext->mutex_.unlock();

                          break;
                        }
                      }
                  }
                }
            }
        }
    }
}

DECLARE_PROBEPLUGIN(OpenTestPoint::IPTraffic::Probe)
