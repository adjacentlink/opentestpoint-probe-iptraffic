/*
 * Copyright (c) 2017 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of Adjacent Link LLC nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

#ifndef OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_
#define OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_

#include "otestpoint/probeplugin.h"

#include <string>
#include <pcap.h>
#include <thread>
#include <mutex>
#include <map>
#include <tuple>
#include <vector>
#include <array>

namespace OpenTestPoint
{
  namespace IPTraffic
  {
    class Probe : public ProbePlugin
    {
    public:
      Probe(ProbeIndex probeIndex);

      ~Probe();

      ProbeNames initialize(const std::string & sConfigurationFile) override;

      void start() override;

      void stop() override;

      void destroy() override;

      ProbeData probe() override;

      class ProbeContext
      {
      public:
        std::string   sDevice_;
        pcap_t *      pPcapHandle_{};
        std::thread   thread_;
        std::mutex    mutex_;

        /**        Storing a data structure like:
                   Store
                   |- Ether Frames
                   |    |- src mac  >--{ total packets
                   |    `- dst mac /
                   `- UDP Packets
                   |- src IP   \
                   |- dst IP    >---{  total bytes
                   `- dst port /     \ total packets

        */
        struct EtherKey
        {
          std::array<std::uint8_t,6>  etherSHost_;
          std::array<std::uint8_t,6>  etherDHost_;

          EtherKey(const std::uint8_t s[], const std::uint8_t d[])
          {
            for(int i=0; i<6; i++)
              {
                etherSHost_[i] = s[i];
                etherDHost_[i] = d[i];
              }
          }

          bool operator<(const EtherKey & b) const
          {
            if(etherSHost_ != b.etherSHost_)
              {
                return etherSHost_ < b.etherSHost_;
              }

            if(etherDHost_ != b.etherDHost_)
              {
                return etherDHost_ < b.etherDHost_;
              }

            return false;

          }
        };

        struct EtherValue
        {
          std::uint64_t u64Packets_;
        };

        struct UDPKey
        {
          std::uint32_t u32SrcIP_;
          std::uint32_t u32DstIP_;
          std::uint16_t u16DstPort_;

          UDPKey(std::uint32_t s, std::uint32_t d, std::uint16_t p):
            u32SrcIP_(s),
            u32DstIP_(d),
            u16DstPort_(p)
          {}

          bool operator<(const UDPKey & b) const
          {
            if(u32SrcIP_ != b.u32SrcIP_)
              {
                return u32SrcIP_ < b.u32SrcIP_;
              }
            if(u32DstIP_ != b.u32DstIP_)
              {
                return u32DstIP_ < b.u32DstIP_;
              }
            if(u16DstPort_ != b.u16DstPort_)
              {
                return u16DstPort_ < b.u16DstPort_;
              }
            return false;
          }
        };

        struct UDPValue
        {
          std::uint64_t u64Bytes_;
          std::uint64_t u64Packets_;
        };

        struct Store
        {
          std::map<EtherKey,EtherValue> ether_;
          std::map<UDPKey,UDPValue> udp_;
        };

        Store store_;

        ProbeContext():
          sDevice_{""}
        {}

        ProbeContext(const ProbeContext & old):
          sDevice_{old.sDevice_},
          pPcapHandle_{old.pPcapHandle_}
        {}

        ProbeContext(const std::string & sName):
          sDevice_{sName}
        {}
      };

    private:
      ProbeNames probeNames_;
      bool       bResetOnSend_ = false;

      std::mutex mutex_;
      std::vector<ProbeContext> vContexts_;

      void readDevice(ProbeContext * pc);
    };
  }
}

# endif // OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_
