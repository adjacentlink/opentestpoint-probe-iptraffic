/*
 * Copyright (c) 2017 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of Adjacent Link LLC nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

#ifndef OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_
#define OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_

#include "otestpoint/probeplugin.h"

#include <string>
#include <pcap.h>
#include <thread>
#include <mutex>
#include <map>
#include <tuple>
#include <vector>

namespace OpenTestPoint
{
  namespace IPTraffic
  {
    
      
      
    class Probe : public ProbePlugin
    {
    public:
      Probe(ProbeIndex probeIndex);

      ~Probe();

      ProbeNames initialize(const std::string & sConfigurationFile) override;

      void start() override;

      void stop() override;

      void destroy() override;

      ProbeData probe() override;

      class ProbeContext
      {
      public:
        std::string   sDevice;
        pcap_t *      pPcapHandle = NULL;
        std::thread   thread;
        std::mutex    mutex;

/**        Storing a data structure like:
  Store
   |- Ether Frames
   |    |- src mac  >--{ total packets
   |    `- dst mac / 
   `- UDP Packets
        |- src IP   \
        |- dst IP    >---{  total bytes
        `- dst port /     \ total packets

 */
        struct etherKey
        {
          std::array<std::uint8_t, 6>  ether_shost;
          std::array<std::uint8_t, 6>  ether_dhost;

          etherKey(const std::uint8_t s[], const std::uint8_t d[])
            {
              for(int i=0; i<6; i++){
                ether_shost[i] = s[i];
                ether_dhost[i] = d[i];
              }
            }
          

          bool operator<(const etherKey b) const
            {
              if(ether_shost != b.ether_shost){
                return ether_shost < b.ether_shost;
              }
              if(ether_dhost != b.ether_dhost){
                return ether_dhost < b.ether_dhost;
              }
              return false;
              
            }

        } ;

        struct etherValue
        {
          std::uint64_t packets;
        };

        struct udpKey
        {
          std::uint32_t src_ip;
          std::uint32_t dst_ip;
          std::uint16_t dst_port;

          udpKey(std::uint32_t s, std::uint32_t d, std::uint16_t p):
            src_ip(s),
            dst_ip(d),
            dst_port(p)
              {
              };
          
          bool operator<(const udpKey b) const
            {
              if(src_ip != b.src_ip){
                return src_ip < b.src_ip;
              }
              if(dst_ip != b.dst_ip){
                return dst_ip < b.dst_ip;
              }
              if(dst_port != b.dst_port){
                return dst_port < b.dst_port;
              }
              return false;
              
            }
        } ;
        
        struct udpValue
        {
          std::uint64_t bytes;
          std::uint64_t packets;
        };
          
        struct Store
        {
          std::map <etherKey, etherValue> Ether;
          std::map <udpKey, udpValue> UDP;
        };
        
        
        Store store;
      

      ProbeContext():
        sDevice{""}
          {
          };
          
      ProbeContext(const ProbeContext& old):
          sDevice{old.sDevice},
          pPcapHandle{old.pPcapHandle}
//          thread{old.thread}
            
          {
          };

      ProbeContext(std::string name):
        sDevice{name}
          {
          };
      
      };
    
    private:
      ProbeNames probeNames_;
        
      std::mutex mutex_;
      std::vector<ProbeContext> vContexts_;

      void readDevice(ProbeContext * pc);
    };
  }
}

# endif // OPENTESTPOINT_IPTRAFFIC_PROBE_HEADER_
